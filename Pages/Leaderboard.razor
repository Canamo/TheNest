@page "/leaderboard"
@inject ApiService ApiService
@using Domain
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Globalization

<div class="content" style="justify-content: start;">
    <div class="content-header">
@* Season radio buttons *@
        <div style="display: flex; gap: 8px;">
            <div class="radio-group">
                <div class="radio-button" @onclick="@(() => SetSeason("s3worldtour"))">
                    <input type="radio" name="s3worldtour" checked="@(season == "s3worldtour")" />
                    <label for="s3worldtour">World Tour</label>
                </div>
            </div>
            <div class="radio-group">
                <div class="radio-button" @onclick="@(() => SetSeason("s3"))">
                    <input type="radio" name="s3" checked="@(season == "s3")" />
                    <label for="s3">Season 3</label>
                </div>
                <div class="radio-button" @onclick="@(() => SetSeason("s2"))">
                    <input type="radio" name="s2" checked="@(season == "s2")" />
                    <label for="s2">Season 2</label>
                </div>
                <div class="radio-button" @onclick="@(() => SetSeason("s1"))">
                    <input type="radio" name="s1" checked="@(season == "s1")" />
                    <label for="s1">Season 1</label>
                </div>
            </div>
            <div class="radio-group">
                <div class="radio-button" @onclick="@(() => SetSeason("ob"))">
                    <input type="radio" name="ob" checked="@(season == "ob")" />
                    <label for="ob">Open Beta</label>
                </div>
                <div class="radio-button" @onclick="@(() => SetSeason("cb2"))">
                    <input type="radio" name="s1" checked="@(season == "cb2")" />
                    <label for="cb2">Closed Beta 2</label>
                </div>
                <div class="radio-button" @onclick="@(() => SetSeason("cb1"))">
                    <input type="radio" name="cb1" checked="@(season == "cb1")" />
                    <label for="cb1">Closed Beta 1</label>
                </div>
            </div>
        </div>
    
@* Platform radio buttons *@
        <div style="display: flex; width: 100%;">
            @if (season == "s2" || season == "s1" || season == "ob")
            {
                <div class="radio-group" style="margin-bottom: 0;">
                    <div class="radio-button" @onclick="@(() => SetPlatform("crossplay"))">
                        <input type="radio" name="crossplay" checked="@(platform == "crossplay")" />
                        <label for="crossplay">
                            <i class="bi bi-globe2" style='color: @(platform == "crossplay" ? "white" : "black")' />
                        </label>
                    </div>
                    <div class="radio-button" @onclick="@(() => SetPlatform("steam"))">
                        <input type="radio" name="steam" checked="@(platform == "steam")" />
                        <label for="steam">
                            <i class="bi bi-steam" style='color: @(platform == "steam" ? "white" : "black")' />
                        </label>
                    </div>
                    <div class="radio-button" @onclick="@(() => SetPlatform("xbox"))">
                        <input type="radio" name="xbox" checked="@(platform == "xbox")" />
                        <label for="xbox">
                            <i class="bi bi-xbox" style='color: @(platform == "xbox" ? "white" : "black")' />
                        </label>
                    </div>
                    <div class="radio-button" @onclick="@(() => SetPlatform("psn"))">
                        <input type="radio" name="psn" checked="@(platform == "psn")" />
                        <label for="psn">
                            <i class="bi bi-playstation" style='color: @(platform == "psn" ? "white" : "black")' />
                        </label>
                    </div>
                </div>
            }

@* Search bar *@
            <span style="margin-left: auto; display: flex; align-items: center;">
                <input type="text" @bind="searchString" @oninput="@(e => { searchString = e.Value?.ToString(); })" @onkeydown="@OnInput" placeholder="Search by name" />
                <button @onclick="@(e => FetchData(searchString))">
                    <i class="bi bi-search" style="color: white;" />
                </button>
            </span>
        </div>
    </div>

@* Leaderboard grid *@
    <div class="content-area">
        @if (!loading)
        {
            <QuickGrid Items="@data" Pagination=@pagination>
                <PropertyColumn Property="@(x => x.Rank)" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true" Align="Align.Center" />
                @if (season == "s3")
                {
                    <TemplateColumn Title="24h Change" Align="Align.Center">
                        <span style="display: flex; align-items: center; justify-content: center;">
                            @if (context.Change > 0)
                            {
                                <i class="bi bi-chevron-up" style="color: green;" />
                                <p class="m-0" style="padding-left: 5px; color: green;">@context.Change</p>
                            }
                            @if (context.Change < 0)
                            {
                                <i class="bi bi-chevron-down" style="color: red;" />
                                <p class="m-0" style="padding-left: 5px; color: red;">@context.Change.ToString().Replace("-", "")</p>
                            }
                            @if (context.Change == 0)
                            {
                                <i class="bi bi-dash" />
                                <p class="m-0" style="padding-left: 5px;">@context.Change</p>
                            }
                        </span>
                    </TemplateColumn>
                }
                <TemplateColumn Title="Name">
                    <span>
                        <p class="m-0">@context.Name</p>
                        @if (!string.IsNullOrEmpty(context.SteamName))
                        {
                            <span style="display: flex; align-items: center;">
                                <i class="bi bi-steam" />
                                <p class="m-0" style="padding-left: 5px;">@context.SteamName</p>
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(context.PsnName))
                        {
                            <span style="display: flex; align-items: center;">
                                <i class="bi bi-playstation" />
                                <p class="m-0" style="padding-left: 5px;">@context.PsnName</p>
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(context.XboxName))
                        {
                            <span style="display: flex; align-items: center;">
                                <i class="bi bi-xbox" />
                                <p class="m-0" style="padding-left: 5px;">@context.XboxName</p>
                            </span>
                        }
                    </span>
                </TemplateColumn>
                @if (season != "s3worldtour")
                {
                    <TemplateColumn Title="League">
                        <div style="display:flex;">
                            <img style="width:3rem;" src="images/@(context.League.Replace(" ", "_")).png" /> 
                            <span style="margin-left: 5px; display: flex; flex-direction: column; justify-content: center;">
                                <p class="m-0">@context.League</p>
                                @if (context.RankScore > 0)
                                {
                                    <p class="m-0">@string.Format(new CultureInfo("en-us"), "{0:c}", context.RankScore).Replace(".00", "").Replace("$", "")</p>
                                }
                            </Span>               
                        </div>
                    </TemplateColumn>
                }
                else 
                {
                    <TemplateColumn Title="Cashouts">
                        <p>@string.Format(new CultureInfo("en-us"), "{0:c}", context.Cashouts).Replace(".00", "")</p>
                    </TemplateColumn>
                }
            </QuickGrid>
        }
        else
        {
@* Loading icon *@
            <span style="display: flex; align-items: center; justify-content: center; height: 100%; margin: 5rem;">
                <img style="color: black;" src="images/loader.gif" alt="Loading..." />
            </span>
        }
        @if (!loading)
        {
            <Paginator State=pagination />
            <div class="radio-group pagination-group">
                <div class="radio-button" @onclick="@(() => pagination.ItemsPerPage = 10)">
                    <input type="radio" name="10" checked="@(pagination.ItemsPerPage == 10)" />
                    <label for="10">10</label>
                </div>
                <div class="radio-button" @onclick="@(() => pagination.ItemsPerPage = 25)">
                    <input type="radio" name="25" checked="@(pagination.ItemsPerPage == 25)" />
                    <label for="25">25</label>
                </div>
                <div class="radio-button" @onclick="@(() => pagination.ItemsPerPage = 50)">
                    <input type="radio" name="50" checked="@(pagination.ItemsPerPage == 50)" />
                    <label for="50">50</label>
                </div>
                <div class="radio-button" @onclick="@(() => pagination.ItemsPerPage = 100)">
                    <input type="radio" name="100" checked="@(pagination.ItemsPerPage == 100)" />
                    <label for="100">100</label>
                </div>
            </div>
        }
    </div>
    <div style="margin-top: 1rem; width: 50rem;">
        <p>This site uses a public API wrapper that can be found <a style="color: white;" href="https://github.com/leonlarsson/the-finals-api">Here!</a></p>
    </div>
</div>


@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<Data>? data = null;

    private string searchString = "";
    private string season = "s3";
    private string platform = "crossplay";
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        data = default;
        await FetchData();
    }

    private async Task FetchData(string name = "")
    {
        loading = true;
        data = null;
        StateHasChanged();

        string baseUrl = "https://api.the-finals-leaderboard.com/";
        string endpoint = "v1/leaderboard/" + season + "/" + platform;

        if (!string.IsNullOrEmpty(name))
            endpoint = endpoint + "?name=" + name;

        Root root = await ApiService.Get<Root>(endpoint, baseUrl);
        data = root.Data.AsQueryable();
        loading = false;
        StateHasChanged();
        StateHasChanged();
        StateHasChanged();
    }

    private async Task OnInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "NumpadEnter")
        {
            await FetchData(searchString);
        }
    }

    private async Task SetSeason(string season)
    {
        this.season = season;
        if (!(season == "s2" || season == "s1" || season == "ob"))
            this.platform = "crossplay";

        await FetchData(searchString);
    }

    private async Task SetPlatform(string platform)
    {
        if (season == "s2" || season == "s1" || season == "ob")
            this.platform = platform;
        else 
            this.platform = "crossplay";
        
        await FetchData(searchString);
    }
}