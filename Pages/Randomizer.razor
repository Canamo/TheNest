@page "/randomizer"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Constants Constants
@inject ApiService ApiService

<div class="content">
    @if (loadout != null)
    {
        @if (!loading)
        {
            <div class="items" style="gap:2rem;">
                <div class="item">
                    <h1 class="itemHeader">Build</h1>
                    <ImageCheckbox ImagePath=@($"images/{loadout.Class}.jpg") AltText=@(loadout.Class.Replace("_", " ")) IsDisabled=true />
                </div>
                <div class="items">
                    <div class="item">
                        <h1 class="itemHeader">Specialization</h1>
                        <ImageCheckbox ImagePath=@($"images/{loadout.Specialization}.png") AltText=@(loadout.Specialization.Replace("_", " ")) IsDisabled=true />
                    </div>
                    <div class="item">
                        <h1 class="itemHeader">Weapon</h1>
                        <ImageCheckbox ImagePath=@($"images/{loadout.Weapon}.png") AltText=@(loadout.Weapon.Replace("_", " ")) IsDisabled=true />
                    </div>
                </div>
                <div class="items">
                    <div class="item">
                        <h1 class="itemHeader">Gadgets</h1>
                        <div class="items">
                            @foreach (string item in loadout.Gadgets) 
                            {
                                <ImageCheckbox ImagePath=@($"images/{item}.png") AltText=@(item.Replace("_", " ")) IsDisabled=true />
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else 
        {
            <img src="images/loader.gif" alt="Loading..." />
        }
        <div style="height:4rem;" />
    }
    else
    {
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error">@errorMessage</p>
        }
    }

    <button class="large-button" @onclick="GenerateRandomLoadout">Generate Random Loadout</button>
</div>

@code {
    private Loadout? loadout = null;
    private bool loading = false;
    private string errorMessage = "";

    private async Task GenerateRandomLoadout()
    {
        loadout = null;
        errorMessage = "";
        loading = true;
        StateHasChanged();

        Dictionary<string, string> headers = new Dictionary<string, string>
        {
            { "removed_classes", await localStorage.GetItemAsync<string>("classes") ?? "" },
            { "removed_specializations", await localStorage.GetItemAsync<string>("specializations") ?? "" },
            { "removed_weapons", await localStorage.GetItemAsync<string>("weapons") ?? "" },
            { "removed_gadgets", await localStorage.GetItemAsync<string>("gadgets") ?? "" }
        };

        loadout = await ApiService.Get<Loadout>("randomizer", headers);

        if (loadout == null)
            errorMessage = "Unable to generate loadout, please check your settings and try again.";

        loading = false;
        StateHasChanged();
    }
}
