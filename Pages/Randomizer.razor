@page "/randomizer"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Constants Constants
@inject ApiService ApiService
@inject NavigationManager _nav

<div class="content fade-in">
    @if (loadout != null)
    {
        @* Play audio *@
        <audio autoplay><source src="audio/roll.mp3" /></audio>

        @*  *@
        <div class="items fade-in" style="gap:2rem;">
            <div class="item">
                <h1 class="itemHeader">Build</h1>

                <div style="max-height: 10.5rem; overflow: hidden; margin-bottom: 2rem;">
                    @if (headers != null && loadout != null)
                    {
                        <div class="reel scroll-in">
                            <ImageCheckbox ImagePath="@($"images/{loadout.Class}.jpg")" AltText="@(loadout.Class.Replace("_", " "))" IsDisabled="true" />
                            @{
                                foreach (var item in Constants.Classes)
                                {
                                    <ImageCheckbox ImagePath="@($"images/{item}.jpg")" AltText="@(item.Replace("_", " "))" IsDisabled="true" />
                                }
                            }
                        </div>
                    }
                </div>
            </div>
            <div class="items">
                <div class="item">
                    <h1 class="itemHeader">Specialization</h1>

                    <div style="max-height: 10.5rem; overflow: hidden; margin-bottom: 2rem;">
                        @if (headers != null && loadout != null)
                        {
                            <div class="reel scroll-in">
                                <ImageCheckbox ImagePath="@($"images/{loadout.Specialization}.png")" AltText="@(loadout.Specialization.Replace("_", " "))" IsDisabled="true" />
                                @{
                                    List<string> specializations = new List<string> (Constants.LSpecializations.Count + Constants.MSpecializations.Count + Constants.HSpecializations.Count);
                                    specializations.AddRange(Constants.LSpecializations);
                                    specializations.AddRange(Constants.MSpecializations);
                                    specializations.AddRange(Constants.HSpecializations);
                                    specializations = Shuffle(specializations);

                                    foreach (var item in specializations)
                                    {
                                        <ImageCheckbox ImagePath="@($"images/{item}.png")" AltText="@(item.Replace("_", " "))" IsDisabled="true" />
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
                <div class="item">
                    <h1 class="itemHeader">Weapon</h1>

                    <div style="max-height: 10.5rem; overflow: hidden; margin-bottom: 2rem;">
                        @if (headers != null && loadout != null)
                        {
                            <div class="reel scroll-in">
                                <ImageCheckbox ImagePath="@($"images/{loadout.Weapon}.png")" AltText="@(loadout.Weapon.Replace("_", " "))" IsDisabled="true" />
                                @{
                                    List<string> weapons = new List<string> (Constants.LWeapons.Count + Constants.MWeapons.Count + Constants.HWeapons.Count);
                                    weapons.AddRange(Constants.LWeapons);
                                    weapons.AddRange(Constants.MWeapons);
                                    weapons.AddRange(Constants.HWeapons);
                                    weapons = Shuffle(weapons);

                                    foreach (var item in weapons)
                                    {
                                        <ImageCheckbox ImagePath="@($"images/{item}.png")" AltText="@(item.Replace("_", " "))" IsDisabled="true" />
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="items">
                <div class="item">
                    <h1 class="itemHeader">Gadgets</h1>
                    <div class="items">
                        @foreach (string item in loadout.Gadgets) 
                        {
                            <div style="max-height: 10.5rem; overflow: hidden; margin-bottom: 2rem;">
                                @if (headers != null && loadout != null)
                                {
                                    <div class="reel scroll-in">
                                        <ImageCheckbox ImagePath="@($"images/{item}.png")" AltText="@(item.Replace("_", " "))" IsDisabled="true" />
                                        @{
                                            List<string> gadgets = new List<string> (Constants.LGadgets.Count + Constants.MGadgets.Count + Constants.HGadgets.Count);
                                            gadgets.AddRange(Constants.LGadgets);
                                            gadgets.AddRange(Constants.MGadgets);
                                            gadgets.AddRange(Constants.HGadgets);
                                            gadgets = Shuffle(gadgets);

                                            foreach (var gadget in gadgets)
                                            {
                                                <ImageCheckbox ImagePath="@($"images/{gadget}.png")" AltText="@(gadget.Replace("_", " "))" IsDisabled="true" />
                                            }
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div style="height:4rem;" />
    }
    else
    {
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="error">@errorMessage</p>
        }
    }

    <div style="display: flex; gap: 1rem;">
        <button class="large-button" @onclick="GenerateRandomLoadout">Generate Random Loadout</button>
        <button class="large-button" @onclick="@(() => _nav.NavigateTo("./options"))">
            <i class="bi bi-gear" style="color: white" />
        </button>
    </div>
</div>

@code {
    private Loadout? loadout = null;
    private string errorMessage = "";
    private Dictionary<string, string>? headers = null;

    private async Task GenerateRandomLoadout()
    {
        loadout = null;
        StateHasChanged();

        headers = new Dictionary<string, string>
        {
            { "removed_classes", await localStorage.GetItemAsync<string>("classes") ?? "" },
            { "removed_specializations", await localStorage.GetItemAsync<string>("specializations") ?? "" },
            { "removed_weapons", await localStorage.GetItemAsync<string>("weapons") ?? "" },
            { "removed_gadgets", await localStorage.GetItemAsync<string>("gadgets") ?? "" }
        };

        loadout = await ApiService.Get<Loadout>("randomizer", headers);

        if (loadout == null)
            errorMessage = "Unable to generate loadout, please check your settings and try again.";

        StateHasChanged();
    }

    private List<T> Shuffle<T>(List<T> list) {
        Random rng = new Random();

        for (int i = list.Count; i > 0; i--) {
            int j = rng.Next(i);
            T value = list[j];
            list[j] = list[i - 1];
            list[i - 1] = value;
        }

        return list;
    }
}
